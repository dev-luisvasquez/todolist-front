/**
 * Generated by orval v7.11.2 游꽄
 * Do not edit manually.
 * TodoList API
 * API para gesti칩n de tareas y usuarios
 * OpenAPI spec version: 1.0
 */
import type {
  DeleteFileResponseDto,
  FileResponseDto,
  OptimizedUrlResponseDto,
  TransformedUrlResponseDto,
  UploadFileWithReplaceDto,
  UploadFromUrlDto,
} from ".././models";

import { customInstance } from "../../mutator/custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getFiles = () => {
  /**
   * Permite subir un archivo de imagen al servidor. Acepta formatos: JPEG, PNG, GIF, WebP. Si se proporciona oldImageUrl, eliminar치 autom치ticamente la imagen anterior.
   * @summary Subir archivo de imagen
   */
  const filesControllerUploadFile = (
    uploadFileWithReplaceDto: UploadFileWithReplaceDto,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    const formData = new FormData();
    formData.append(`file`, uploadFileWithReplaceDto.file);
    if (uploadFileWithReplaceDto.folder !== undefined) {
      formData.append(`folder`, uploadFileWithReplaceDto.folder);
    }
    if (uploadFileWithReplaceDto.oldImageUrl !== undefined) {
      formData.append(`oldImageUrl`, uploadFileWithReplaceDto.oldImageUrl);
    }

    return customInstance<FileResponseDto>(
      {
        url: `/files/upload`,
        method: "POST",
        headers: { "Content-Type": "multipart/form-data" },
        data: formData,
      },
      options,
    );
  };
  /**
   * Permite subir una imagen directamente desde una URL externa
   * @summary Subir imagen desde URL
   */
  const filesControllerUploadFromUrl = (
    uploadFromUrlDto: UploadFromUrlDto,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<FileResponseDto>(
      {
        url: `/files/upload-from-url`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: uploadFromUrlDto,
      },
      options,
    );
  };
  /**
   * Obtiene una URL optimizada de una imagen existente con formato y calidad autom치ticos
   * @summary Obtener URL optimizada
   */
  const filesControllerGetOptimizedUrl = (
    publicId: string,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<OptimizedUrlResponseDto>(
      { url: `/files/optimized/${publicId}`, method: "GET" },
      options,
    );
  };
  /**
   * Obtiene una URL de imagen transformada con ancho y alto espec칤ficos
   * @summary Obtener URL transformada con dimensiones
   */
  const filesControllerGetTransformedUrl = (
    publicId: string,
    width: string,
    height: string,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<TransformedUrlResponseDto>(
      {
        url: `/files/transformed/${publicId}/${width}/${height}`,
        method: "GET",
      },
      options,
    );
  };
  /**
   * Elimina una imagen del servidor usando su ID p칰blico
   * @summary Eliminar imagen
   */
  const filesControllerDeleteImage = (
    publicId: string,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<DeleteFileResponseDto>(
      { url: `/files/${publicId}`, method: "DELETE" },
      options,
    );
  };
  return {
    filesControllerUploadFile,
    filesControllerUploadFromUrl,
    filesControllerGetOptimizedUrl,
    filesControllerGetTransformedUrl,
    filesControllerDeleteImage,
  };
};
export type FilesControllerUploadFileResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getFiles>["filesControllerUploadFile"]>>
>;
export type FilesControllerUploadFromUrlResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getFiles>["filesControllerUploadFromUrl"]>
  >
>;
export type FilesControllerGetOptimizedUrlResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getFiles>["filesControllerGetOptimizedUrl"]>
  >
>;
export type FilesControllerGetTransformedUrlResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getFiles>["filesControllerGetTransformedUrl"]>
  >
>;
export type FilesControllerDeleteImageResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getFiles>["filesControllerDeleteImage"]>>
>;
