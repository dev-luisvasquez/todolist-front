/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * TodoList API
 * API para gesti√≥n de tareas y usuarios
 * OpenAPI spec version: 1.0
 */
import type {
  CreateTaskDto,
  DeleteMultipleTasksDto,
  TaskControllerGetAllTasksParams,
  TaskDto,
  UpdateTaskDto,
  UpdateTaskStateDto,
} from ".././models";

import { customInstance } from "../../mutator/custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getTasks = () => {
  /**
   * Obtiene una lista de todas las tareas registradas en el sistema, opcionalmente filtradas por estado
   * @summary Obtener todas las tareas por id de usuario
   */
  const taskControllerGetAllTasks = (
    id: string,
    params?: TaskControllerGetAllTasksParams,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<TaskDto[]>(
      { url: `/tasks/user/${id}`, method: "GET", params },
      options,
    );
  };
  /**
   * Obtiene la informaci√≥n de una tarea espec√≠fica por su ID
   * @summary Obtener tarea por ID
   */
  const taskControllerGetTaskById = (
    id: string,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<TaskDto>(
      { url: `/tasks/${id}`, method: "GET" },
      options,
    );
  };
  /**
   * Actualiza toda la informaci√≥n de una tarea espec√≠fica
   * @summary Actualizar tarea completa
   */
  const taskControllerUpdateTaskById = (
    id: string,
    updateTaskDto: UpdateTaskDto,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<TaskDto>(
      {
        url: `/tasks/${id}`,
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        data: updateTaskDto,
      },
      options,
    );
  };
  /**
   * Elimina una tarea espec√≠fica del sistema
   * @summary Eliminar tarea por ID
   */
  const taskControllerDeleteTask = (
    id: string,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<TaskDto>(
      { url: `/tasks/${id}`, method: "DELETE" },
      options,
    );
  };
  /**
   * Crea una nueva tarea en el sistema
   * @summary Crear nueva tarea
   */
  const taskControllerCreateTask = (
    createTaskDto: CreateTaskDto,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<TaskDto>(
      {
        url: `/tasks`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: createTaskDto,
      },
      options,
    );
  };
  /**
   * Elimina m√∫ltiples tareas del sistema usando sus IDs
   * @summary Eliminar m√∫ltiples tareas
   */
  const taskControllerDeleteMultipleTasks = (
    deleteMultipleTasksDto: DeleteMultipleTasksDto,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<null>(
      {
        url: `/tasks`,
        method: "DELETE",
        headers: { "Content-Type": "application/json" },
        data: deleteMultipleTasksDto,
      },
      options,
    );
  };
  /**
   * Actualiza √∫nicamente el estado de una tarea espec√≠fica
   * @summary Actualizar estado de tarea
   */
  const taskControllerUpdateTaskState = (
    id: string,
    updateTaskStateDto: UpdateTaskStateDto,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<TaskDto>(
      {
        url: `/tasks/${id}/state`,
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        data: updateTaskStateDto,
      },
      options,
    );
  };
  return {
    taskControllerGetAllTasks,
    taskControllerGetTaskById,
    taskControllerUpdateTaskById,
    taskControllerDeleteTask,
    taskControllerCreateTask,
    taskControllerDeleteMultipleTasks,
    taskControllerUpdateTaskState,
  };
};
export type TaskControllerGetAllTasksResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getTasks>["taskControllerGetAllTasks"]>>
>;
export type TaskControllerGetTaskByIdResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getTasks>["taskControllerGetTaskById"]>>
>;
export type TaskControllerUpdateTaskByIdResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getTasks>["taskControllerUpdateTaskById"]>
  >
>;
export type TaskControllerDeleteTaskResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getTasks>["taskControllerDeleteTask"]>>
>;
export type TaskControllerCreateTaskResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getTasks>["taskControllerCreateTask"]>>
>;
export type TaskControllerDeleteMultipleTasksResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getTasks>["taskControllerDeleteMultipleTasks"]>
  >
>;
export type TaskControllerUpdateTaskStateResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getTasks>["taskControllerUpdateTaskState"]>
  >
>;
