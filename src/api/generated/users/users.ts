/**
 * Generated by orval v7.11.2 游꽄
 * Do not edit manually.
 * TodoList API
 * API para gesti칩n de tareas y usuarios
 * OpenAPI spec version: 1.0
 */
import type {
  UpdateUserDto,
  UserResponseDto,
  UsersControllerUpdateUserAvatarBody,
} from ".././models";

import { customInstance } from "../../mutator/custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getUsers = () => {
  /**
   * Actualiza la informaci칩n del usuario autenticado basado en el token JWT
   * @summary Actualizar perfil del usuario autenticado
   */
  const usersControllerUpdateUserById = (
    updateUserDto: UpdateUserDto,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<UserResponseDto>(
      {
        url: `/users/profile`,
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        data: updateUserDto,
      },
      options,
    );
  };
  /**
   * Obtiene la informaci칩n de un usuario espec칤fico por su ID
   * @summary Obtener usuario por ID
   */
  const usersControllerGetUserById = (
    id: string,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<UserResponseDto>(
      { url: `/users/${id}`, method: "GET" },
      options,
    );
  };
  /**
   * Elimina un usuario espec칤fico por su ID
   * @summary Eliminar usuario por ID
   */
  const usersControllerDeleteUserById = (
    id: string,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<UserResponseDto>(
      { url: `/users/${id}`, method: "DELETE" },
      options,
    );
  };
  /**
   * Obtiene una lista de todos los usuarios registrados
   * @summary Obtener todos los usuarios
   */
  const usersControllerGetAllUsers = (
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<UserResponseDto[]>(
      { url: `/users`, method: "GET" },
      options,
    );
  };
  /**
   * Actualiza el avatar del usuario autenticado. Elimina autom치ticamente el avatar anterior si existe.
   * @summary Actualizar avatar del usuario
   */
  const usersControllerUpdateUserAvatar = (
    usersControllerUpdateUserAvatarBody: UsersControllerUpdateUserAvatarBody,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    const formData = new FormData();
    if (usersControllerUpdateUserAvatarBody.file !== undefined) {
      formData.append(`file`, usersControllerUpdateUserAvatarBody.file);
    }

    return customInstance<UserResponseDto>(
      {
        url: `/users/profile/avatar`,
        method: "PUT",
        headers: { "Content-Type": "multipart/form-data" },
        data: formData,
      },
      options,
    );
  };
  return {
    usersControllerUpdateUserById,
    usersControllerGetUserById,
    usersControllerDeleteUserById,
    usersControllerGetAllUsers,
    usersControllerUpdateUserAvatar,
  };
};
export type UsersControllerUpdateUserByIdResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getUsers>["usersControllerUpdateUserById"]>
  >
>;
export type UsersControllerGetUserByIdResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getUsers>["usersControllerGetUserById"]>>
>;
export type UsersControllerDeleteUserByIdResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getUsers>["usersControllerDeleteUserById"]>
  >
>;
export type UsersControllerGetAllUsersResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getUsers>["usersControllerGetAllUsers"]>>
>;
export type UsersControllerUpdateUserAvatarResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getUsers>["usersControllerUpdateUserAvatar"]>
  >
>;
